from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import logging
from config import TOKEN, ADMIN_ID
from scraper import KijijiScraper

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

scraper = KijijiScraper()

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–∏—Å–∫ Kijiji")

@dp.message_handler()
async def handle_url(message: types.Message):
    url = message.text
    if "kijiji.ca" not in url:
        return await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ Kijiji")
    
    await message.answer("–ù–∞—á–∏–Ω–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...")
    results = scraper.scrape(url)
    
    if not results:
        return await message.answer("–û–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    for item in results[:3]:  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ 3
        await message.answer(
            f"üè† {item['title']}\n"
            f"üí∞ {item['price']}\n"
            f"üìç {item['location']}\n"
            f"üîó {item['url']}"
        )

if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp)
